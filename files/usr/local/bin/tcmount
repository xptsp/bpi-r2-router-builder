#!/bin/bash
RED='\033[1;31m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
NC='\033[0m'
CHECK="\xE2\x9C\x94"
CROSS="\xE2\x9D\x8C"

# If we are not running as root, then run this script as root:
if [[ "$EUID" -ne 0 ]]; then
    sudo $0 $@
    exit $?
fi

# Read in the configuration file:
unset volumes mount before services bind rebind after
while IFS='= ' read key val
do
	# Ignore comments and empty lines:
	if [[ ! -z ${key} && ! ${key} == \#* ]]; then
		if [[ ${key} == \[*] ]]; then
			# Section names must be lowercase and alphanumeric characters only:
			section=$(echo $key | sed 's/[][]//g' | tr '[:upper:]' '[:lower:]')
			[[ ! -z "${options[debug]}" ]] && (echo "[$section]")
		elif [[ ${val} ]]; then
			# Substitute "HOME_DIR" with current home directory, if found:
			[[ ${key} == HOME_DIR/* ]] && key=${key/HOME_DIR/${HOME}}
			[[ ${val} == HOME_DIR/* ]] && val=${val/HOME_DIR/${HOME}}
			[[ ! -z "${options[debug]}" ]] && echo "${key}=${val}"
			# Add the key/value set to the array:
			declare -A "$section[${key}]=${val}"
		fi
	fi
done < /etc/tcmount.ini

# Create our mounting options string here:
unset MNT
for option in "${!mount[@]}"; do
	MNT="${MNT}$([[ ! -z "${MNT}" ]] && echo ",")$option=${mount[$option]}"
done
[[ ! -z "${MNT}" ]] && MNT="-o ${MNT}"

# Determine what volumes are present and unmounted:
for file in "${!volumes[@]}"; do
	if [[ -e ${file} ]]; then
		PART=$(ls -l $file | cut -d">" -f 2 | cut -d"/" -f 3)
		MNT=$(mount | grep " ${volumes[${file}]} ")
		[[ ! -z "${PART}" && -z "${MNT}" ]] && declare -A "uuid[${file}]=${volumes[${file}]}"
	fi
done
if [[ -z "${!uuid[@]}" ]]; then
	echo -e "${GREEN}[${BLUE}${CHECK}${GREEN}]  No unmounted TrueCrypt volumes found!  Exiting..."
	exit 0
fi

# Loop until no volumes left to mount OR user cancels the script:
while [[ ! -z "${!uuid[@]}" ]]; do
	# Was password specified on command-line?  If so, use it!
	if [[ ! -z "${options[p]}" || ! -z "${options[password]}" ]]; then
		[[ -z "${options[p]}" ]] && declare -A "options[p]=${options[password]}"
		PASS=${options[p]}

	# Get the password to use to attempt to open the TrueCrypt volumes:
	read -s -p "Enter Password: " PASS; echo ""
	[[ -z "${PASS}" || $? -gt 0 ]] && exit 0

	# Attempt to mount the specified partitions using the supplied password:
	for part in "${!uuid[@]}"; do
		dst=${uuid[${part}]}
		[[ ! -d ${dst} ]] && mkdir -p ${dst}
		OUT=$(unset DISPLAY; truecrypt --non-interactive -k "" --protect-hidden=no -p ${PASS} ${part} ${dst} 2>&1)
		if [[ ! -z "${OUT}" ]]; then
			echo -e "${GREEN}[${RED}${CROSS}${GREEN}]  ${OUT}${NC}"
		else
			echo -e "${GREEN}[${BLUE}${CHECK}${GREEN}]  $(basename ${dst}) mounted successfully!"
			PART=$(mount | grep "${uuid[${part}]}" | cut -d" " -f 1)
			if [[ ! -z "${MNT}" ]]; then
				umount ${dst} && mount ${MNT} ${PART} ${dst}
			fi
			unset uuid[${part}]
		fi
	done

	# If password was specified on command-line, abort if everything isn't mounted:
	[[ ! -z "${options[p]}" && ! -z "${!uuid[@]}" ]] && exit 1 done fi
done

# Notify user if we need to have any services that we will be stopping:
for service in "${services[@]}"; do 
	echo -e "${GREEN}[${BLUE}${CHECK}${GREEN}]  Stopping service ${service}..."
	systemctl stop ${service}
done

# Notify user if we need to rebind directories:
if [[ ! -z "${rebind[@]}" || ! -z "${bind[@]}" ]]; then
	MSG="Binding mount points together...  Please wait!"
	echo -e "${GREEN}[${BLUE}${CHECK}${GREEN}]  ${MSG}${NC}"

	# Bind the specified folders together:
	for src in "${!bind[@]}"; do
		dst=${bind[${src}]}
		[[ -e ${dst} && -e ${src} ]] && mount --bind ${src} ${dst}
	done
fi

# Start the specified services:
for service in "${services[@]}"; do 
	echo -e "${GREEN}[${BLUE}${CHECK}${GREEN}]  Starting service ${service}..."
	systemctl stop ${service}
done
