#!/bin/bash

# Load router settings:
[[ -f /etc/default/router-settings ]] && source /etc/default/router-settings

# Use Receive Packet Steering (RPS) to steer incoming data from "wan" to CPUs 2 and 3:
[[ "${IFACE}" == "wan" ]] && echo 6 > /sys/class/net/${IFACE}/queues/rx-0/rps_cpus

# Determine the IPv4 and IPv6 address of the interface:
IPv4=$(ip addr show ${IFACE} | grep " inet "  | awk '{print $2}')
IPv6=$(ip addr show ${IFACE} | grep " inet6 " | awk '{print $2}')

# Are we dealing with the "br0" interface? 
if [[ "$IFACE" == "br0" ]]; then
	# Use Receive Packet Steering (RPS) to steer incoming data from "br0" to CPUs 4:
	echo 8 > /sys/class/net/${IFACE}/queues/rx-0/rps_cpus

	# Add DNS redirect rules ONLY if option "redirect_dns" is set to "Y":
	if [[ "${redirect_dns:-"Y"}" == "Y" ]]; then
		# Add rules to redirect IPv4 DNS requests:
		PIHOLE=$(ifconfig br0 | grep 'inet ' | awk '{print $2}')
		nft add rule inet firewall prerouting_lan ip saddr != ${IPv4} ip daddr != ${IPv4} udp dport 53 dnat to ${IPv4} comment "${IFACE}"
		nft add rule inet firewall prerouting_lan ip saddr != ${IPv4} ip daddr != ${IPv4} tcp dport 53 dnat to ${IPv4} comment "${IFACE}"

		# Add rules to redirect IPv6 DNS requests:
		nft add rule inet firewall prerouting_lan ip6 saddr != ${IPv6} ip6 daddr != ${IPv6} udp dport 53 dnat to ${IPv6} comment "${IFACE}"
		nft add rule inet firewall prerouting_lan ip6 saddr != ${IPv6} ip6 daddr != ${IPv6} tcp dport 53 dnat to ${IPv6} comment "${IFACE}"
	fi

# Otherwise, if this is a masquerading interface, then put the IP addresses of the interface in the 
# firewall's "prerouting_private" chain.  This should allow double-nat configurations to work properly:
elif [[ ! -z "${IF_MASQUERADE}" ]]; then
	nft insert rule inet firewall prerouting_private iifname ${IFACE} ip saddr ${IPv4} return
	nft insert rule inet firewall prerouting_private iifname ${IFACE} ip6 saddr ${IPv6} return
	/opt/bpi-r2-router-builder/helpers/router-helper.sh dns config
fi

# Exit with a zero error code:
exit 0
