#############################################################################
# Define WAN (Wide Area Network) and LAN (Local Area Network) interfaces.
# NOTE: WAN interfaces face the world.  LAN are ethernet & wireless.  Defaults
# are my default settings, which will be replaced by "nftables-script.sh".
#############################################################################
define DEV_LAN = { br0, mt7615_24g, mt7615_5g }
define DEV_WAN = { wan }
define DEV_NO_NET = { no_net }
define DEV_IPs = { 192.168.2.0/24, 192.168.21.0/24, 192.168.22.0/24 }

#############################################################################
# Define rules that affect both IPv4 and IPv6:
#############################################################################
table inet filter {

################################################[ MAPS & SETS ]#################################################
	map forward_port_tcp { type inet_service : ipv4_addr . inet_service; }
	map forward_port_udp { type inet_service : ipv4_addr . inet_service; }
	map forward_range_tcp { type inet_service : ipv4_addr; flags interval; }
	map forward_range_udp { type inet_service : ipv4_addr; flags interval; }

	#############################################################################
	set trigger_list_tcp { type inet_service; flags interval; }
	set trigger_open_tcp { type inet_service; flags timeout; }
	map trigger_port_tcp { type inet_service : ipv4_addr; }

	#############################################################################
	set trigger_list_udp { type inet_service; flags interval; }
	set trigger_open_udp { type inet_service; flags timeout; }
	map trigger_port_udp { type inet_service : ipv4_addr; }

	#############################################################################
	set inside_network { type ipv4_addr; flags interval; elements = $DEV_IPs; }

################################################[ PRE-ROUTING ]#################################################
	chain prerouting_wan {
		# Forward each port in "forward_port" map to it's respective IP address/port combo:
		dnat ip addr . port to tcp dport map @forward_port_tcp
		dnat ip addr . port to udp dport map @forward_port_udp
		
		# Forward range of ports in "trigger_port" map to their respective IP addresses:
		dnat ip to tcp dport map @forward_range_tcp
		dnat ip to udp dport map @forward_range_udp

		# Forward each port in "trigger_port" map to it's respective IP address --ONLY-- if the timeout hasn't expired:
		tcp dport @trigger_open_tcp dnat ip to tcp dport map @trigger_port_tcp
		udp dport @trigger_open_udp dnat ip to udp dport map @trigger_port_udp
	}

	#############################################################################
	chain prerouting_lan {
	}

	#############################################################################
	chain prerouting {
		# Default Post-Routing policy is "ACCEPT":
		type nat hook prerouting priority dstnat; policy accept;

		# WAN interfaces must jump to "prerouting_wan" chain now:
		iifname $DEV_WAN jump prerouting_wan

		# LAN interfaces must jump to "prerouting_lan" chain now:
		iifname $DEV_LAN jump prerouting_lan
	}

################################################[ POST-ROUTING ]################################################
	chain postrouting_trigger {
		# Remove outbound port from "trigger_port" set if timeout has expired: 
		tcp dport != @trigger_open_tcp delete @trigger_port_tcp { tcp dport : 0.0.0.0 }
		udp dport != @trigger_open_udp delete @trigger_port_udp { udp dport : 0.0.0.0 }

		# Link the outbound port to the source IP address:
		add @trigger_port_tcp { tcp dport : ip saddr }
		add @trigger_port_udp { udp dport : ip saddr }

		# Update the timeout for the protocol/port combination:
		update @trigger_open_tcp { tcp dport timeout 1m }
		update @trigger_open_udp { udp dport timeout 1m }
	}

	#############################################################################
	chain postrouting_wan {
		# If source IP address is from inside the network AND the destination port is in
		# the port triggering list, jump to the appropriate chain:
		ip saddr @inside_network tcp dport @trigger_list_tcp jump postrouting_trigger
		ip saddr @inside_network udp dport @trigger_list_udp jump postrouting_trigger

		# Masquerade everything going out on our WAN interfaces:
		masquerade
	}

	#############################################################################
	chain postrouting_lan {
	}

	#############################################################################
	chain postrouting {
		# Default Post-Routing policy is "ACCEPT":
		type nat hook postrouting priority srcnat; policy accept;

		# Jump to the chain "postrouting_wan" for WAN interfaces:
		oifname $DEV_WAN jump postrouting_wan

		# Jump to the chain "postrouting_wan" for LAN interfaces:
		oifname $DEV_LAN jump postrouting_lan
	}

##################################################[ INBOUND ]###################################################
	chain inbound_wan {
		# Allow multicast packets inbound from the Internet:
		# NOTE: Commented out by nftables-script.sh if option "allow_multicast" is "N".
#		pkttype multicast accept

		# Allow port 113 (IDENT) from the Internet:
		# NOTE: Commented out by nftables-script.sh if option "drop_ident" is "N".
#		tcp dport 113 accept
	}

	#############################################################################
	chain inbound_lan {
	}

	#############################################################################
	chain inbound {
		# Default Inbound policy is "DROP":
		type filter hook input priority 0; policy drop;

		# Allow traffic from established and related packets, drop invalid
		ct state vmap { established : accept, related : accept, invalid : drop }

		# Redirect incoming port 67 to port 68:
		meta l4proto udp udp sport 67 udp dport 68 accept

		# Jump to "inbound_wan" chain for our WAN interfaces:
		iifname $DEV_WAN jump inbound_wan

		# Jump to "inbound_lan" chain for our LAN interfaces:
		iifname $DEV_LAN jump inbound_lan

		# Allow traffic from loopback and LAN interfaces:
		iifname { lo, $DEV_LAN } accept
	}

##################################################[ FORWARD ]###################################################
	chain forward_to_wan {
		# Reject all DoT (DNS-over-TLS) packets from LAN interfaces:
		# NOTE: Commented out by nftables-script.sh if option "allow_dot" is "N".
		meta l4proto {tcp, udp} @th,16,16 853 reject

		# Reject all DoQ (DNS-over-QUIC) packets from LAN interfaces:
		# NOTE: Commented out by nftables-script.sh if option "allow_doq" is "N".
		meta l4proto {tcp, udp} @th,16,16 8853 reject
	}

	#############################################################################
	chain forward_to_lan {
	}

	#############################################################################
	chain forward_from_lan {
		# LAN to WAN communication must jump to "forward_to_wan" chain now:
		oifname $DEV_WAN jump forward_to_wan

		# Forward connections from the LAN interfaces to WAN interfaces:
		oifname $DEV_WAN accept

		# LAN to LAN communication must jump to "forward_to_lan" chain now:
		oifname $DEV_LAN jump forward_to_lan

		# Forward connections from the LAN interfaces to LAN interfaces:
		oifname $DEV_LAN accept
	}

	#############################################################################
	chain forward {
		# Default Forwarding policy is "DROP":
		type filter hook forward priority 0; policy drop;

		# Allow traffic from established and related packets, drop invalid:
		ct state vmap { established : accept, related : accept, invalid : drop }

		# Drop communication from any interfaces with "no_internet" flag set to WAN interfaces:
		iifname $DEV_NO_NET oifname $DEV_WAN drop

		# From LAN communication must jump to "forward_from_lan" chain now:
		iifname $DEV_LAN jump forward_from_lan
	}

##################################################[ OUTBOUND ]##################################################
	chain outbound_vpn {
		# Default rule is to block from accessing anything but the "lo" interface.
		# This rule will be replaced by the OpenVPN configuration script when connecting.
		oifname != "lo" drop
	}

	#############################################################################
	chain outbound_wan {
		# Reject multicast packets outbound to the Internet.
		# NOTE: Commented out by nftables-script.sh if option "allow_multicast" is "Y".
		pkttype multicast reject
	}

	#############################################################################
	chain outbound_lan {
	}

	#############################################################################
	chain outbound {
		# Default Output policy is "ACCEPT":
		type filter hook output priority 0; policy accept;

		# User "vpn" must jump to the "outbound_vpn" chain now:
		meta skuid "vpn" jump outbound_vpn

		# All WAN interfaces must jump to the "outbound_wan" chain now:
		oifname $DEV_WAN jump outbound_wan

		# All LAN interfaces must jump to the "outbound_lan" chain now:
		oifname $DEV_LAN jump outbound_lan
	}
}
