# List a particular chain in a nftables table:  nft list chain inet global forward

#############################################################################
# Define WAN (Wide Area Network) and LAN (Local Area Network) interfaces:
# NOTE: WAN interfaces face the world.  LAN are ethernet & wireless.
#############################################################################
define DEV_LAN = { br0 }
define DEV_WAN = { wan }
define DEV_NO_NET = { no_net }

#############################################################################
# Clear out the ruleset because we need to start fresh!
#############################################################################
flush ruleset

#############################################################################
# Define rules that affect both IPv4 and IPv6:
#############################################################################
table inet global {
	#############################################################################
	chain prerouting_ports {
	}

	#############################################################################
	chain prerouting {
		# Default Post-Routing policy is "ACCEPT":
		type filter hook prerouting priority mangle; policy accept;
		
		# Drop invalid packets:
		ct state invalid drop

		# This blocks all packets that are new (don’t belong to an established connection) and don’t use the SYN flag.
		tcp flags & (fin|syn|rst|ack) != syn ct state new drop
		
		# Block Packets With Bogus TCP Flags:
		tcp flags & (fin|syn) == fin|syn drop
		tcp flags & (syn|rst) == syn|rst drop
		tcp flags & (fin|rst) == fin|rst drop
		tcp flags & (fin|ack) == fin drop
		tcp flags & (ack|urg) == urg drop
		tcp flags & (psh|ack) == psh drop
		tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0 drop

		# Block Packets From Private Subnets (Spoofing):
		iifname $DEV_WAN ip saddr { 0.0.0.0/8, 10.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.0.2.0/24, 192.168.0.0/16, 224.0.0.0/5, 240.0.0.0/5 } drop
		iifname != "lo" ip saddr 127.0.0.0/8 drop

		# Block fragmented packets:
		ip frag-off & 0x1fff != 0 counter drop

		# Jump to chain "prerouting_ports" for port forwarding rules:
		jump prerouting_ports
	}

	#############################################################################
	chain inbound_wan {
	}

	#############################################################################
	chain inbound_lan {
	}

	#############################################################################
	chain inbound {
		# Default Inbound policy is "DROP":
		type filter hook input priority 100; policy drop;

		# Block Flooding of RST packets, SMURF attack Rejection
		meta l4proto icmp limit rate 2/second burst 2 packets accept

		# Allow traffic from established and related packets, drop invalid
		ct state vmap { established : accept, related : accept, invalid : drop }

		# Redirect incoming port 67 to port 68:
		meta l4proto udp udp sport 67 udp dport 68 accept

		# Allow all loopback traffic:
		iifname lo accept

		# Jump to "inbound_wan" chain for our WAN interfaces:
		iifname $DEV_WAN jump inbound_wan

		# Jump to "inbound_lan" chain for our LAN interfaces:
		iifname $DEV_LAN jump inbound_lan
	}

	#############################################################################
	chain forward_ports {
	}

	#############################################################################
	chain forward {
		# Default Forwarding policy is "DROP":
		type filter hook forward priority 100; policy drop;

		# Allow traffic from established and related packets, drop invalid
		ct state vmap { established : accept, related : accept, invalid : drop }

		# Jump to chain "forward_ports" for port forwarding rules:
		jump forward_ports

		# Drop all connections to WAN interfaces from any interfaces with "no_internet" flag set:
		iifname $DEV_NO_NET oifname $DEV_WAN drop

		# Forward connections from the LAN interfaces to WAN interfaces:
		iifname $DEV_LAN oifname $DEV_WAN accept

		# Forward connections from the LAN interfaces to LAN interfaces:
		iifname $DEV_LAN oifname $DEV_LAN accept
	}

	######################################################
	chain postrouting {
		# Default Post-Routing policy is "ACCEPT":
		type nat hook postrouting priority 100; policy accept;

		# Masquerade everything going out on our WAN interfaces:
		oifname $DEV_WAN masquerade
	}

	#############################################################################
	chain outbound_vpn {
		# Block from accessing anything but the "lo" interface:
		oifname != "lo" drop
	}

	#############################################################################
	chain outbound_wan {
	}

	#############################################################################
	chain outbound {
		# Default Output policy is "ACCEPT":
		type filter hook output priority 100; policy accept;

		# User "vpn" must jump to the "outbound_vpn" chain now:
		meta skuid "vpn" jump outbound_vpn

		# All WAN interfaces must jump to the "outbound_wan" chain now:
		oifname $DEV_WAN jump outbound_wan
	}
}
