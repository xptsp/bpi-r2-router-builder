#!/bin/bash

# If we are not doing this as root, we need to change to root now!
if [[ "${UID}" -ne 0 ]]; then
	sudo $0 $@
	exit $?
fi
RED='\033[1;31m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
NC='\033[0m'

##############################################################################################
# Install necessary tools for building this image:
##############################################################################################
if [[ ! -f /usr/bin/qemu-arm-static ]]; then
	echo -e "${GREEN}INFO:${NC} Installing necessary tools on this computer..."
	apt-get install -y qemu-user-static debootstrap binfmt-support
fi
distro=buster
arch=armhf
cd $(dirname $0)
parent=$(dirname $PWD)
target=/tmp/debian_${distro}_${arch}

##############################################################################################
# Loop through our menu until "Cancel" is chosen:
##############################################################################################
while :; do
	##############################################################################################
	# Decide which options to show the user:
	##############################################################################################
	CHOICES=(	"1" "Create Chroot environment" 
				"2" "Enter Chroot Environment")

	##############################################################################################
	# Show the dialog box with the options we've decided on.  Exit script if they select "Cancel":
	##############################################################################################
	OPTION=$(whiptail --title "BPIWRT Builder" --menu "What do you want to do?" 15 60 8 "${CHOICES[@]}" 3>&1 1>&2 2>&3)
	[[ "$?" -gt 0 ]] && exit

	##############################################################################################
	# Do the choice that the user selected:
	##############################################################################################
	echo -e "${GREEN}##############################################################################################${NC}"
	case ${OPTION} in
		##############################################################################################
		# Build Chroot Environment
		##############################################################################################
		1)
			img=${parent}/bpiwrt_v$(date +"%Y.%m%d.%H%M").img
			echo -e "${GREEN}INFO:${NC} Unpacking empty image into ${BLUE}${img}${NC}..."
			mkdir ${target} >& /dev/null
			cp misc/bpiwrt_empty.img.gz ${img}.gz
			gunzip -f ${img}.gz

			echo -e "${GREEN}INFO:${NC} Mounting ${BLUE}${dev}p2${NC} on ${BLUE}${img}${NC}..."
			dev="$(sudo losetup --show -f -P "${img}")"
			mount ${dev}p2 ${target}
			echo -e "${GREEN}INFO:${NC} Mounting ${BLUE}${dev}p1${NC} on ${BLUE}${img}/boot${NC}..."
			mkdir ${target}/boot
			mount ${dev}p1 ${target}/boot

			echo -e "${GREEN}INFO:${NC} Starting stage 1 of debootstrap process..."
			debootstrap --arch=${arch} --foreign ${distro} ${target}

			echo -e "${GREEN}INFO:${NC} Starting stage 2 of debootstrap process..."
			[[ ! -f ${target}/usr/bin/ ]] && cp /usr/bin/qemu-arm-static ${target}/usr/bin/
			cp /etc/resolv.conf ${target}/etc
			rm -rf ${target}/opt/bpiwrt-builder >& /dev/null
			mkdir -p ${target}/opt
			cp -R $(dirname $0) ${target}/opt/bpi-r2-router-builder/
			mount --bind /proc ${target}/proc
			mount --bind /sys ${target}/sys
			mount --bind /tmp ${target}/tmp
			chroot ${target} /opt/bpi-r2-router-builder/misc/stage_2
			umount ${target}/tmp >& /dev/null
			umount ${target}/sys >& /dev/null
			umount ${target}/proc >& /dev/null

			if [[ -d ${parent}/SD/BPI-BOOT ]]; then
				echo -e "${GREEN}INFO:${NC} Copying compiled kernel to boot partition..."
				rsync -r ${parent}/SD/BPI-BOOT/* ${target}/boot/
			fi
			if [[ -d ${parent}/SD/BPI-ROOT ]]; then
				echo -e "${GREEN}INFO:${NC} Copying compiled kernel to root partition..."
				rsync -r ${parent}/SD/BPI-ROOT/* ${target}/
			fi

			echo -e "${GREEN}INFO:${NC} Unmounting ${BLUE}${img}${NC}..."
			umount ${target}/boot
			umount ${target}
			losetup -d ${dev}
			rmdir ${target}
			;;
			
		##############################################################################################
		# Enter Chroot Environment
		##############################################################################################
		2)
			# Assemble the list of imgs to display:
			options=()
			count=0
			while read -r img
			do
				 options+=($((++count)) "$(basename $img)")
			done <<< $(ls -r ${parent}/*.img)

			# Display the dialog box:
			cmd=(dialog --keep-tite --menu "Select Image to Restore:" 22 76 16)
			CHOICE=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
			[[ "$CHOICE" -eq 0 ]] && continue
			img=${parent}/${options[ $(( $CHOICE * 2 - 1)) ]}

			dev="$(sudo losetup --show -f -P "${img}")"
			echo -e "${GREEN}INFO:${NC} Mounting ${BLUE}${dev}${NC} on ${BLUE}${img}${NC}..."
			mkdir ${target} >& /dev/null
			mount ${dev}p2 ${target}
			mount ${dev}p1 ${target}/boot

			echo -e "${GREEN}INFO:${NC} Entering Chroot Environment..."
			mount --bind /proc ${target}/proc
			mount --bind /sys ${target}/sys
			mount --bind /tmp ${target}/tmp
			chroot ${target} $1
			umount ${target}/tmp >& /dev/null
			umount ${target}/sys >& /dev/null
			umount ${target}/proc >& /dev/null

			echo -e "${GREEN}INFO:${NC} Unmounting Chroot Environment..."
			umount ${target}/boot
			umount ${target}
			losetup -d ${dev}
			rmdir ${target}
			;;
	esac
done
exit

