#!/bin/bash
export DEBIAN_FRONTEND=noninteractive
export LANG=C

##############################################################################################
# Execute second-stage of image building:
##############################################################################################
[[ -f /debootstrap/debootstrap ]] && /debootstrap/debootstrap --second-stage

##############################################################################################
# Install some packages that Frank-W had in his image:
##############################################################################################
apt install -y apt-transport-https bridge-utils dnsmasq hostapd ca-certificates openssh-server ppp pppoeconf pppoe

##############################################################################################
# Fix the hung SSH session issue with Debian Buster:
##############################################################################################
ln -sf /usr/share/doc/openssh-client/examples/ssh-session-cleanup.service /etc/systemd/system/
systemctl enable --now ssh-session-cleanup

##############################################################################################
# Create our default users and assign default passwords to users:
##############################################################################################
# Assign default password to user "root":
echo -e "bananapi\nbananapi" | passwd -q root

# Create username "pi", being a member of the "sudo" and "users" group.
useradd -m -G sudo,users -s /bin/bash pi
echo -e "bananapi\nbananapi" | passwd -q pi
chown pi:pi -R /home/pi

# Create username "vpn", being a member of the "users" and "pi" group:
useradd -m -G users -s /usr/sbin/nologin vpn
usermod -aG vpn pi
chown vpn:vpn -R /home/vpn

# Create username "guest" and assign default password:
useradd -N -g nogroup -M -d /nonexistent -s /usr/sbin/nologin portal
echo -e "bananapi\nbananapi" | passwd -q portal

##############################################################################################
# Do some tasks necessary to make this image work correctly:
##############################################################################################
# Create necessary symlinks for a few commands:
ln -sf /usr/bin/clear /usr/local/bin/cls
ln -sf /opt/bpi-r2-router-builder/helpers/router-helper.sh /usr/local/bin/router-helper

# Set hostname:
echo "bpiwrt" > /etc/hostname
hostname bpiwrt

# Set IP address of both hostname and pi.hole
echo "192.168.2.1     pi.hole" >> /etc/hosts
echo "192.168.2.1     bpiwrt" >> /etc/hosts

# Refreshes the certificates:
update-ca-certificates -f

# Sets timezone to "America/Chicago":
rm /etc/localtime
ln -s /usr/share/zoneinfo/America/Chicago /etc/localtime

# Set a placeholder file for chrooting into read-only filesystem:
touch /etc/debian_chroot

# Sets locale to "en_US.UTF-8":
sed -i "s|# en_US.UTF-8 UTF-8|en_US.UTF-8 UTF-8|g" /etc/locale.gen
locale-gen

##############################################################################################
# Upgrade any packages needing upgrading:
##############################################################################################
apt update
apt upgrade -y
systemctl disable --now hostapd

##############################################################################################
# Install some necessary packages:
##############################################################################################
apt install -y wget git toilet pmount eject lsb-release dialog mosquitto-clients sudo gnupg curl gnupg
apt install -y vlan ipset traceroute nmap conntrack ndisc6 whois iperf3 tcpdump ethtool irqbalance wireless-regdb crda
git config --global pull.rebase false

##############################################################################################
# Install files from the GitHub repository to build this image:
##############################################################################################
git clone https://github.com/xptsp/bpiwrt-builder /opt/bpi-r2-router-builder/
/opt/bpi-r2-router-builder/upgrade.sh --force-copy
systemctl enable --now firewall
update-rc.d wifi start 99 5

##############################################################################################
# Install xptsp's Debian APT repository on GitHub:
##############################################################################################
curl -SsL https://xptsp.github.io/ppa/KEY.gpg | apt-key add -
curl -SsL -o /etc/apt/sources.list.d/bpiwrt_repo.list https://xptsp.github.io/ppa/ppa.list

##############################################################################################
# Place a list of english words in "/usr/share/dict/" for our password generator:
##############################################################################################
wget https://github.com/dobsondev/php-password-generator/raw/master/php-password-generator/adjectives.list -O /usr/share/dict/adjectives.list
wget https://github.com/dobsondev/php-password-generator/raw/master/php-password-generator/animals.list -O /usr/share/dict/animals.list

##############################################################################################
# Download the "mmc" binary and place in "/usr/local/bin":
##############################################################################################
wget https://github.com/frank-w/BPI-R2-4.14/raw/4.14-main/utils/mmc/mmc -O /usr/local/bin/mmc
chmod +x /usr/local/bin/mmc

##############################################################################################
# Get the file we'll need to flash during SD->EMMC copies:
##############################################################################################
wget https://github.com/BPI-SINOVOIP/BPI-files/raw/master/SD/100MB/BPI-R2-EMMC-boot0-DDR1600-0k-0905.img.gz -O /boot/BPI-R2-EMMC-boot0-DDR1600-0k-0905.img.gz
echo "WEBUI_SHARE=y" >> /boot/persistent.conf

##################################################################################
# Create our custom login message:
##################################################################################
rm /etc/motd
rm /etc/update-motd.d/10-uname
ln -s /var/run/motd /etc/motd

##################################################################################
# Install some new utilities
##################################################################################
apt install -y pciutils usbutils iw wireless-tools net-tools curl unzip debconf-utils tree screen parted device-tree-compiler bluez

##################################################################################
# Install avahi utilities
##################################################################################
apt install -y avahi-daemon 
systemctl enable --now avahi-daemon

##################################################################################
# Install utility to track internet usage by adapter:
##################################################################################
apt update
apt install -y vnstat=1.18-2
apt-mark hold vnstat
systemctl disable --now vnstat

##################################################################################
# Install Samba
##################################################################################
echo "samba-common samba-common/dhcp boolean true" | debconf-set-selections
apt install -y samba
echo -e "bananapi\nbananapi" | smbpasswd -a pi
# NOTE: Modify the Samba configuration to make sharing USB sticks more automatic
sed -i "1s|^|include = /etc/samba/includes.conf\n\n|" /etc/samba/smb.conf
touch /etc/samba/includes.conf
sed -i "s|/var/run|/run|g" /lib/systemd/system/?mbd.service
systemctl enable --now smbd
systemctl enable --now nmbd

##################################################################################
# Install NGINX and PHP 7.4
##################################################################################
apt install -y nginx php7.4-fpm php7.4-cgi php7.4-xml php7.4-sqlite3 php7.4-intl apache2-utils php7.4-mysql php7.4-sqlite3 sqlite3 php7.4-zip php7.4-curl
sed -i "s|display_errors = .*|display_errors = On|g" /etc/php/7.4/fpm/php.ini
rm /etc/nginx/sites-enabled/default
ln -sf /etc/nginx/sites-available/router /etc/nginx/sites-enabled/default
ln -sf /etc/nginx/sites-available/hotspot /etc/nginx/sites-enabled/hotspot
usermod -aG systemd-journal www-data
systemctl enable --now php7.4-fpm
apt-mark hold php7.4-fpm
systemctl enable --now nginx
apt-mark hold nginx
echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

##################################################################################
# Install Transmission-BT program
##################################################################################
mv /etc/transmission-daemon/settings.json /tmp/settings.json
apt install -y transmission-daemon
mv /tmp/settings.json /etc/transmission-daemon/settings.json
chown -R vpn:vpn /etc/transmission-daemon/
chown -R vpn:vpn /var/lib/transmission-daemon/
chmod -R 775 /etc/transmission-daemon/
chmod -R 775 /var/lib/transmission-daemon/
mkdir -p /home/vpn/{Incomplete,Download}
chown -R vpn:vpn /home/vpn/{Incomplete,Download}
chmod -R 775 /home/vpn/{Incomplete,Download}
systemctl enable --now transmission-daemon
ln -sf /etc/nginx/sites-available/transmission /etc/nginx/sites-enabled/

##################################################################################
# Install TrueCrypt and HD-Idle
##################################################################################
mv /etc/default/hd-idle /tmp/
apt install -y truecrypt-cli hd-idle
mv /tmp/hd-idle /etc/default/hd-idle

##################################################################################
# Pull ydns's bash-updater repo and modify to pull settings from elsewhere
##################################################################################
git clone --depth=1 https://github.com/ydns/bash-updater /opt/ydns-updater
sed -i "s|^YDNS_LASTIP_FILE|[[ -f /etc/default/ydns-updater ]] \&\& source /etc/default/ydns-updater\nYDNS_LASTIP_FILE|" /opt/ydns-updater/updater.sh
chown www-data:www-data /etc/default/ydns-updater

##################################################################################
# Install docker and add bin directory on docker partition to system path
##################################################################################
curl -L https://get.docker.com | bash
usermod -aG docker pi
sed -i "s|PATH=\"|PATH=\"/var/lib/docker/bin:|g" /etc/profile

##################################################################################
# Download docker-compose into the /usr/local/bin directory
##################################################################################
wget https://github.com/tsitle/dockercompose-binary_and_dockerimage-aarch64_armv7l_x86_x64/raw/master/binary/docker-compose-linux-armhf-1.27.4.tgz -O /tmp/docker.tgz
pushd /tmp
tar xvzf /tmp/docker.tgz
mv docker-compose-linux-armhf-1.27.4 /usr/local/bin/
ln -sf /usr/local/bin/docker-compose-linux-armhf-1.27.4 /usr/local/bin/docker-compose
popd

##################################################################################
# Install cloudflared binary:
##################################################################################
wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm -O /usr/local/bin/cloudflared
chmod +x /usr/local/bin/cloudflared
useradd -s /usr/sbin/nologin -r -M cloudflared
chown cloudflared:cloudflared /etc/default/cloudflared
chown cloudflared:cloudflared /usr/local/bin/cloudflared
systemctl enable --now cloudflared@1
systemctl enable --now cloudflared@2
systemctl enable --now cloudflared@3

##################################################################################
# Install PiHole
##################################################################################
curl -L https://install.pi-hole.net | bash /dev/stdin --unattended
# NOTE: Mask "dnsmasq" package so we don't conflict with it!
systemctl disable --now dnsmasq
systemctl mask dnsmasq
# NOTE: Configure some things correctly
chown pihole:pihole /var/lib/misc
chown pihole:pihole -R /var/lib/misc/*
chown www-data:www-data -R /var/www/html
chown www-data:www-data -R /var/www/html/*
rm /var/www/html/index.nginx-debian.html
# NOTE: Add pihole group to www-data
usermod -aG pihole www-data
# NOTE: Set default password as "bananapi"
pihole -a -p bananapi
# NOTE: Set default DNS to cloudflare port 5051
sed -i "/PIHOLE_DNS_.*/d" /etc/pihole/setupVars.conf
echo "PIHOLE_DNS_1=127.0.0.1#5051" >> /etc/pihole/setupVars.conf
pihole restartdns
# NOTE: Add site configuration for "pi.hole":
ln -sf /etc/nginx/sites-available/pihole /etc/nginx/sites-enabled/pihole
systemctl restart nginx
echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

##################################################################################
# Install the wireless regulatory table
##################################################################################
apt install -y wireless-regdb crda
git clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/sforshee/wireless-regdb.git/ /opt/wireless-regdb
test -f /lib/firmware/regulatory.db && unlink /lib/firmware/regulatory.db
ln -sf /opt/wireless-regdb/regulatory.db /lib/firmware/
test -f /lib/firmware/regulatory.db.p7s && unlink /lib/firmware/regulatory.db.p7s
ln -sf /opt/wireless-regdb/regulatory.db.p7s /lib/firmware/

##################################################################################
# Pull in dependencies to make my SSD1306 front display work:
##################################################################################
# Install support packages:
apt install -y i2c-tools python3-pil python3-adafruit-pureio python3-adafruit-gpio python3-adafruit-ssd1306 python3-adafruit-bbio python3-psutil python3-spidev
# Install the stats repo:
git clone --depth=1 https://github.com/xptsp/bpi-r2-ssd1306-display /opt/stats
ln -sf /opt/stats/stats.service /etc/systemd/system/stats.service
systemctl enable --now stats

################################################################################
# Install and configure miniupnp install
##################################################################################
# NOTE: Install the miniupnp install quietly
echo "miniupnpd miniupnpd/start_daemon boolean true" | debconf-set-selections
echo "miniupnpd miniupnpd/ip6script boolean false" | debconf-set-selections
echo "miniupnpd miniupnpd/listen string br0" | debconf-set-selections
echo "miniupnpd miniupnpd/iface string wan" | debconf-set-selections
apt install -y miniupnpd miniupnpc
# NOTE: Configure the service:
sed -i "s|#secure_mode=.*|secure_mode=yes|g" /etc/miniupnpd/miniupnpd.conf
sed -i "s|#enable_upnp=no|enable_upnp=yes|g" /etc/miniupnpd/miniupnpd.conf
sed -i "s|#enable_natpmp=yes|enable_natpmp=yes|g" /etc/miniupnpd/miniupnpd.conf
sed -i "s|#http_port=.*|http_port=49152|g" /etc/miniupnpd/miniupnpd.conf
systemctl enable --now miniupnpd

##################################################################################
# Install minissdpd package
##################################################################################
# NOTE: Set some default settings for minissdpd package:
echo "minissdpd minissdpd/listen string br0" | debconf-set-selections
echo "minissdpd minissdpd/ip6 boolean false" | debconf-set-selections
echo "minissdpd minissdpd/start_daemon boolean true" | debconf-set-selections
# NOTE: Install minissdpd package:
apt install -y minissdpd
systemctl enable --now minissdpd

##################################################################################
# Install ulogd2 package
##################################################################################
apt install -y ulogd2
mkdir -p /var/log/ulog
touch /var/log/ulog/{port_scans,udp_floods}.log
chmod 755 -R /var/log/ulog

##################################################################################
# Install fail2ban
##################################################################################
apt install -y fail2ban
systemctl enable --now fail2ban
