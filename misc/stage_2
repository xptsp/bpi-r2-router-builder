#!/bin/bash
export DEBIAN_FRONTEND=noninteractive
export LANG=C

##############################################################################################
# Execute second-stage of image building:
##############################################################################################
[[ -f /debootstrap/debootstrap ]] && /debootstrap/debootstrap --second-stage

##############################################################################################
# Install some packages that Frank-W had in his image:
##############################################################################################
apt install -y apt-transport-https bridge-utils dnsmasq hostapd ca-certificates openssh-server ppp pppoeconf

##############################################################################################
# Install some support packages required for our image:
##############################################################################################
apt install -y --reinstall debian-keyring debian-archive-keyring nftables sudo pv git
systemctl enable nftables
git config --global pull.rebase false

##############################################################################################
# Correctly configure SSH:
##############################################################################################
sed -i "s|#ClientAliveInterval .*|ClientAliveInterval 60|g" /etc/ssh/sshd_config
sed -i "s|#ClientAliveCountMax .*|ClientAliveCountMax 3|g" /etc/ssh/sshd_config
sed -i "s|#PermitRootLogin .*|PermitRootLogin yes|g" /etc/ssh/sshd_config
systemctl restart sshd

##############################################################################################
# Fix hung SSH session upon shutting down and/or restarting router:
##############################################################################################
ln -sf /usr/share/doc/openssh-client/examples/ssh-session-cleanup.service /etc/systemd/system/
systemctl enable --now ssh-session-cleanup

##############################################################################################
# Create our default users and assign default passwords to users:
##############################################################################################
# Assign default password to user "root":
echo -e "bananapi\nbananapi" | passwd -q root

# Create username "pi", being a member of the "sudo" and "users" group.
useradd -m -G sudo,users -s /bin/bash pi
echo -e "bananapi\nbananapi" | passwd -q pi
chown pi:pi -R /home/pi

# Create username "vpn", being a member of the "users" and "pi" group:
useradd -m -G users -s /usr/sbin/nologin vpn
usermod -aG vpn pi
chown vpn:vpn -R /home/vpn

# Create username "portal" and assign default password:
useradd -N -g nogroup -M -d /nonexistent -s /usr/sbin/nologin portal
echo -e "bananapi\nbananapi" | passwd -q portal

##############################################################################################
# Do some tasks necessary to make this image work correctly:
##############################################################################################
# Create necessary symlinks for a few commands:
ln -sf /usr/bin/clear /usr/local/bin/cls
ln -sf /opt/bpi-r2-router-builder/helpers/router-helper.sh /usr/local/bin/router-helper

# Set hostname:
echo "bpiwrt" > /etc/hostname
hostname bpiwrt

# Set IP address of both hostname and pi.hole
echo "192.168.2.1     bpiwrt" >> /etc/hosts

# Refreshes the certificates:
update-ca-certificates -f

# Sets timezone to "America/Chicago":
rm /etc/localtime
ln -s /usr/share/zoneinfo/America/Chicago /etc/localtime

# Set a placeholder file for chrooting into read-only filesystem:
touch /etc/debian_chroot

# Sets locale to "en_US.UTF-8":
sed -i "s|# en_US.UTF-8 UTF-8|en_US.UTF-8 UTF-8|g" /etc/locale.gen
locale-gen

##############################################################################################
# Install files from the GitHub repository to build this image:
##############################################################################################
git clone https://github.com/xptsp/bpiwrt-builder /opt/bpi-r2-router-builder/
pushd /opt/bpi-r2-router-builder
./upgrade.sh --force-copy
git config pull.rebase false
popd
update-rc.d wifi start 99 5

#=============================================================================================
# <<NOTE TO SELF>> 2022-07-14: Bullseye base image complete up to here!
#=============================================================================================

##############################################################################################
# Install xptsp's Debian APT repository on GitHub:
##############################################################################################
curl -s --compressed https://xptsp.github.io/ppa/KEY.gpg | sudo apt-key add -
curl -SsL -o /etc/apt/sources.list.d/bpiwrt_repo.list https://xptsp.github.io/ppa/ppa.list

##############################################################################################
# Upgrade any packages needing upgrading:
##############################################################################################
apt update
apt upgrade -y

##############################################################################################
# Upgrade hostapd to v2.10 from bullseye-backports and disable service:
##############################################################################################
apt install -y hostapd/bullseye-backports
systemctl disable --now hostapd

##############################################################################################
# Install some necessary packages:
##############################################################################################
apt install -y wget toilet pmount eject lsb-release dialog mosquitto-clients gnupg curl gnupg squashfs-tools
apt install -y vlan ipset traceroute nmap conntrack ndisc6 whois iperf3 tcpdump ethtool irqbalance

##############################################################################################
# Place a list of english words in "/usr/share/dict/" for our password generator:
##############################################################################################
wget https://github.com/dobsondev/php-password-generator/raw/master/php-password-generator/adjectives.list -O /usr/share/dict/adjectives.list
wget https://github.com/dobsondev/php-password-generator/raw/master/php-password-generator/animals.list -O /usr/share/dict/animals.list

##############################################################################################
# Download the "mmc" binary and place in "/usr/local/bin":
##############################################################################################
wget https://github.com/frank-w/BPI-R2-4.14/raw/4.14-main/utils/mmc/mmc -O /usr/local/bin/mmc
chmod +x /usr/local/bin/mmc

##############################################################################################
# Get the file we'll need to flash during SD->EMMC copies:
##############################################################################################
RW=($(mount | grep " /boot " 2> /dev/null))
if [[ ! -z "${RW[5]}" ]]; then
	[[ "${RW[5]}" == *ro,* ]] && mount -o remount,rw /boot
	wget https://github.com/BPI-SINOVOIP/BPI-files/raw/master/SD/100MB/BPI-R2-EMMC-boot0-DDR1600-0k-0905.img.gz -O /boot/BPI-R2-EMMC-boot0-DDR1600-0k-0905.img.gz
	echo "WEBUI_SHARE=y" >> /boot/persistent.conf
fi

##################################################################################
# Create our custom login message:
##################################################################################
rm /etc/motd
rm /etc/update-motd.d/10-uname
ln -s /var/run/motd /etc/motd

##################################################################################
# Install some new utilities
##################################################################################
apt install -y pciutils usbutils wireless-tools net-tools unzip debconf-utils tree screen parted device-tree-compiler bluez

##################################################################################
# Install avahi utilities
##################################################################################
apt install -y avahi-daemon
systemctl enable --now avahi-daemon

##################################################################################
# Install utility to track internet usage by adapter:
##################################################################################
apt install -y vnstat=1.18-2
systemctl disable --now vnstat

##################################################################################
# Install Samba
##################################################################################
echo "samba-common samba-common/dhcp boolean true" | debconf-set-selections
apt install -y samba
echo -e "bananapi\nbananapi" | smbpasswd -a pi
# Modify the Samba configuration to make sharing USB sticks more automatic
sed -i "1s|^|include = /etc/samba/includes.conf\n\n|" /etc/samba/smb.conf
sed -i "s|^;   bind interfaces only = yes|    bind interfaces only = yes|" /etc/samba/smb.conf
sed -i "s|^;   interfaces = 127.0.0.0/8 eth0|   interfaces = br0|g" /etc/samba/smb.conf
touch /etc/samba/includes.conf
systemctl enable --now smbd
systemctl enable --now nmbd

##################################################################################
# Install NGINX and PHP 7.4
##################################################################################
apt install -y nginx php7.4-fpm php7.4-cgi php7.4-xml php7.4-sqlite3 php7.4-intl apache2-utils php7.4-mysql php7.4-sqlite3 sqlite3 php7.4-zip php7.4-curl fcgiwrap
FILE=/etc/php/7.4/fpm/php.ini
sed -i "s|^display_errors = .*|display_errors = On|g" ${FILE}
sed -i "s|^session.gc_maxlifetime = .*|session.gc_maxlifetime = 86400|g" ${FILE}
rm /etc/nginx/sites-enabled/default
ln -sf /etc/nginx/sites-available/router /etc/nginx/sites-enabled/default
usermod -aG systemd-journal www-data
systemctl enable --now php7.4-fpm
apt-mark hold php7.4-fpm
systemctl enable --now nginx
apt-mark hold nginx
echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

##################################################################################
# Install Transmission-daemon
##################################################################################
apt install -y transmission-daemon
systemctl stop transmission-daemon
mkdir -p /home/vpn/.config/transmission-daemon/
cp /opt/bpi-r2-router-builder/misc/services/transmission.json /home/vpn/.config/transmission-daemon/settings.json
test -e /etc/transmission-daemon/settings.json && rm /etc/transmission-daemon/settings.json
ln -sf /home/vpn/.config/transmission-daemon/settings.json /etc/transmission-daemon/settings.json
cp /opt/bpi-r2-router-builder/misc/services/transmission-daemon /etc/default/transmission-daemon
chown -R vpn:vpn /etc/transmission-daemon/
chown -R vpn:vpn /var/lib/transmission-daemon/
chmod -R 775 /etc/transmission-daemon/
chmod -R 775 /var/lib/transmission-daemon/
mkdir -p /home/vpn/{Incomplete,Completed}
chown -R vpn:vpn /home/vpn/*
chmod -R 775 /home/vpn/{Incomplete,Completed}
systemctl enable --now transmission-daemon
ln -sf /etc/nginx/sites-available/transmission /etc/nginx/sites-enabled/

##################################################################################
# Replace transmission-daemon WebUI with custom WebUI:
##################################################################################
cd /usr/share/transmission/
mv web original
wget https://github.com/Secretmapper/combustion/archive/release.zip
unzip release.zip
rm release.zip
ln -sf combustion-release web
cd /

##################################################################################
# Install TrueCrypt and HD-Idle
##################################################################################
apt install -y truecrypt-cli hd-idle
cp /opt/bpi-r2-router-builder/misc/services/hd-idle /etc/default/hd-idle
systemctl enable --now hd-idle

##################################################################################
# Pull ydns's bash-updater repo and modify to pull settings from elsewhere
##################################################################################
git clone --depth=1 https://github.com/ydns/bash-updater /opt/ydns-updater
sed -i "s|^YDNS_LASTIP_FILE|[[ -f /etc/default/ydns-updater ]] \&\& source /etc/default/ydns-updater\nYDNS_LASTIP_FILE|" /opt/ydns-updater/updater.sh
chown www-data:www-data /etc/default/ydns-updater

##################################################################################
# Install docker and add bin directory on docker partition to system path
##################################################################################
curl -L https://get.docker.com | bash
usermod -aG docker pi
sed -i "s|PATH=\"|PATH=\"/var/lib/docker/bin:|g" /etc/profile

##################################################################################
# Download docker-compose into the /usr/local/bin directory
##################################################################################
wget https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-linux-armv7 -O /usr/local/bin/docker-compose-linux-armv7_2.6.1
chmod +x /usr/local/bin/docker-compose-linux-armv7_2.6.1
ln -sf /usr/local/bin/docker-compose-linux-armv7_2.6.1 /usr/local/bin/docker-compose
touch /etc/docker-compose.yaml

##################################################################################
# Install cloudflared binary:
##################################################################################
wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm -O /usr/local/bin/cloudflared
chmod +x /usr/local/bin/cloudflared
useradd -s /usr/sbin/nologin -r -M cloudflared
chown cloudflared:cloudflared /etc/default/cloudflared
chown cloudflared:cloudflared /usr/local/bin/cloudflared
systemctl enable --now cloudflared@1
systemctl enable --now cloudflared@2
systemctl enable --now cloudflared@3

##################################################################################
# Install PiHole
##################################################################################
# Copy the default configuration to the "/etc/pihole" directory:
mkdir -p /etc/pihole
cp /opt/bpi-r2-router-builder/misc/services/pihole.conf /etc/pihole/setupVars.conf

# Install Pi-Hole on this machine:
curl -L https://install.pi-hole.net | bash /dev/stdin --unattended

# Mask "dnsmasq" package so we don't conflict with it!
systemctl disable --now dnsmasq
systemctl mask dnsmasq
# Configure some things correctly
chown pihole:pihole /var/lib/misc
chown pihole:pihole -R /var/lib/misc/*
chown www-data:www-data -R /var/www/html
chown www-data:www-data -R /var/www/html/*
rm /var/www/html/index.nginx-debian.html
# Add pihole group to www-data
usermod -aG pihole www-data
# Set default administrative password to "bananapi"
pihole -a -p bananapi
# Fix the hostname resolution issue found:
echo "PIHOLE_PTR=HOSTNAME" >> /etc/pihole/pihole-FTL.conf
# Set default DNS to cloudflare port 5051
sed -i "/PIHOLE_DNS_.*/d" /etc/pihole/setupVars.conf
echo "PIHOLE_DNS_1=127.0.0.1#5051" >> /etc/pihole/setupVars.conf
pihole restartdns
# Add site configuration for "pi.hole":
ln -sf /etc/nginx/sites-available/pihole /etc/nginx/sites-enabled/pihole
systemctl restart nginx
echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Set global DNS nameserver to PiHole and make it immutable:
echo "nameserver 127.0.0.1" > /etc/resolv.conf

##################################################################################
# Install the wireless regulatory table
##################################################################################
apt install -y wireless-regdb crda
git clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/sforshee/wireless-regdb.git/ /opt/wireless-regdb
test -f /lib/firmware/regulatory.db && unlink /lib/firmware/regulatory.db
ln -sf /opt/wireless-regdb/regulatory.db /lib/firmware/
test -f /lib/firmware/regulatory.db.p7s && unlink /lib/firmware/regulatory.db.p7s
ln -sf /opt/wireless-regdb/regulatory.db.p7s /lib/firmware/

################################################################################
# Install and configure miniupnp install
##################################################################################
# Install the miniupnp install quietly
echo "miniupnpd miniupnpd/start_daemon boolean true" | debconf-set-selections
echo "miniupnpd miniupnpd/ip6script boolean false" | debconf-set-selections
echo "miniupnpd miniupnpd/listen string br0" | debconf-set-selections
echo "miniupnpd miniupnpd/iface string wan" | debconf-set-selections
apt install -y miniupnpd miniupnpc
# Configure the service:
FILE=/etc/miniupnpd/miniupnpd.conf
sed -i "s|^#secure_mode=.*|secure_mode=yes|g" ${FILE}
sed -i "/secure_mode=no/d" ${FILE}
sed -i "s|^#enable_upnp=no|enable_upnp=yes|g" ${FILE}
sed -i "s|^#enable_natpmp=yes|enable_natpmp=yes|g" ${FILE}
sed -i -e '/^allow / s/^#*/#/' ${FILE}
sed -i -e '/^deny / s/^#*/#/' ${FILE}
sed -i "s|^force_igd_desc_v1=.*|#force_igd_desc_v1=no|" ${FILE}
sed -i -e "/upnp_/s/^#*//" ${FILE}
# Enable and restart the service:
systemctl enable miniupnpd
systemctl restart miniupnpd

##################################################################################
# Install minissdpd package
##################################################################################
# Set some default settings for minissdpd package:
echo "minissdpd minissdpd/listen string br0" | debconf-set-selections
echo "minissdpd minissdpd/ip6 boolean false" | debconf-set-selections
echo "minissdpd minissdpd/start_daemon boolean true" | debconf-set-selections
# Install minissdpd package:
apt install -y minissdpd
sed -i "s|^MiniSSDPd_INTERFACE_ADDRESS=.*|MiniSSDPd_INTERFACE_ADDRESS=\"br0 mt7615_24g mt7615_5g\"|" /etc/default/minisspd
systemctl enable minissdpd
systemctl restart minissdpd

##################################################################################
# Install multicast-relay repo and supporting packages:
##################################################################################
# Install supporting packages here:
apt install python3-netifaces
# Clone the multicast-relay repo:
git clone https://github.com/alsmith/multicast-relay /opt/multicast-relay
# Configure and start the service:
cp /opt/bpi-r2-router-builder/misc/services/multicast-relay /etc/default/multicast-relay
systemctl enable --now multicast-relay

##################################################################################
# Install OpenVPN and make a few configuration changes:
##################################################################################
# Install the software:
apt install -y openvpn resolvconf
# Add routing table to "/etc/iproute2/rt_tables":
echo "200	vpn" >> /etc/iproute2/rt_tables
# Stop VPN connections from automatically starting:
sed -i "s|^#AUTOSTART=\"none\"|AUTOSTART=\"none\"|" /etc/default/openvpn

##################################################################################
# Install Squid and Privoxy, then configure the services:
##################################################################################
# Install the software:
apt install -y privoxy squid-openssl
# Copy new Squid configuration file into place:
FILE=/etc/squid/squid.conf
test -f ${FILE} || cp ${FILE} ${FILE}.bak
cp /opt/bpi-r2-router-builder/misc/services/squid.conf ${FILE}
# Copy new Privoxy configuration files into place:
FILE=/etc/privoxy/config
test -f ${FILE} || cp ${FILE} ${FILE}.bak
cp /opt/bpi-r2-router-builder/misc/services/privoxy-config.conf ${FILE} 
cp /opt/bpi-r2-router-builder/misc/services/privoxy-blocklist.conf $(dirname ${FILE})/blocklist.conf 
# Download AdBlock list downloading script for Privoxy:
FILE=/usr/local/bin/privoxy-blocklist.sh
wget https://raw.github.com/Andrwe/privoxy-blocklist/master/privoxy-blocklist.sh -O ${FILE} 
chmod +x ${FILE}
sed -i "s|SCRIPTCONF=\"/etc\/privoxy-.*|SCRIPTCONF=\"/etc/privoxy/blocklist.conf\"|" ${FILE}
sed -i "s|\.script\.|\.adblock\.|g" ${FILE}

#=============================================================================================
# <<NOTE TO SELF>> 2022-09-29: Needs fixing from here on!
#=============================================================================================

##################################################################################
# Install PiVPN, modifying files and installing packages as required:
##################################################################################
# Copy the default configuration to the "/etc/pihole" directory:
mkdir -p /etc/pivpn
cp /opt/bpi-r2-router-builder/misc/services/pivpn.conf /etc/pivpn/setupVars.conf

# Clone the PiVPN repository:
DIR=/usr/local/src/pivpn
git clone https://github.com/pivpn/pivpn.git ${DIR}

# Set repository head to commit "f80b0a7962d91862132c0a4abd65c1e67bd37bd7" (Dec 3rd, 2021):
cd ${DIR}
git reset --hard f80b0a7962d91862132c0a4abd65c1e67bd37bd7

# Modify the PiVPN installer so that we can delay creation of certificates and such:
MODDED=/usr/local/src/modded_pivpn_install.sh
cp ${DIR}/auto_install/install.sh ${MODDED}
sed -i 's|setStaticIPv4(){|setStaticIPv4(){\n\treturn;|g' ${MODDED}
sed -i "/restartServices$/d" ${MODDED}
sed -i "/confLogging$/d" ${MODDED}
sed -i 's|confOVPN$|createOVPNuser|g' ${MODDED}
sed -i '/confNetwork$/d' ${MODDED}
sed -i "s|confOpenVPN(){|generateServerName(){|" ${MODDED}
sed -i "s|# Backup the openvpn folder|echo \"SERVER_NAME=\$SERVER_NAME\" >> /etc/openvpn/.server_name\n}\n\nbackupOpenVPN(){\n\t# Backup  the openvpn folder|" ${MODDED}
sed -i "s|\tif \[ -f /etc/openvpn/server.conf \]; then|}\n\nconfOpenVPN(){\n\tif [ -f /etc/openvpn/server.conf ]; then|" ${MODDED}
sed -i 's|\tcd /etc/openvpn/easy-rsa|}\n\nGenerateOpenVPN() {\n\tcd  /etc/openvpn/easy-rsa|' ${MODDED}
sed -i "s|  if ! getent passwd openvpn; then|}\n\ncreateOVPNuser(){\n  if ! getent  passwd openvpn >\& /dev/null; then|" ${MODDED}
sed -i "s|  \${SUDOE} chown \"\$debianOvpnUserGroup\" /etc/openvpn/crl.pem|}\n\ncreateServerConf(){\n\t\${SUDOE}  chown \"\$debianOvpnUserGroup\" /etc/openvpn/crl.pem|" ${MODDED}
sed -i "s|whiptail --msgbox --backtitle \"Setup OpenVPN\"|echo; #whiptail --msgbox --backtitle \"Setup OpenVPN\"|g" ${MODDED}
sed -i "s|main \"\$@\"|[[ -z \"\${IN_DOCKER}\" ]] \&\& main \"\$@\"|g" ${MODDED}
#sed -i "s|if [ \"\${USE_PREDEFINED_DH_PARAM}\" -eq 1 ]; then|if [ \"\${DOWNLOAD_DH_PARAM}\" -eq 1]; then\n\t\t\t\${SUDOE} curl https://2ton.com.au/getprimes/random/dhparam/\${pivpnENCRYPT} -o pki/dh\${pivpnENCRYPT}.pem\nelif [ \"\${USE_PREDEFINED_DH_PARAM}\"  -eq 1 ]; then|" ${MODDED}

# Run the modified script:
bash ${MODDED} --unattended /etc/pivpn/setupVars.conf --reconfigure

# Customize the PiVPN setupVars.conf in the /tmp folder:
setupVars=/usr/local/src/setupVars.conf
cp /tmp/setupVars.conf ${setupVars}
sed -i "/^pivpnHOST=/d" ${setupVars}
sed -i "/^IPv4dev=/d" ${setupVars}
echo "pivpnDH_DOWNLOAD=0" >> ${setupVars}
echo "pivpnDH_PREDEFINED=0" >> ${setupVars}
echo "pivpnTWO_POINT_FOUR=0" >> ${setupVars}
echo "pivpnWEB_PASS=password" >> ${setupVars}
echo "pivpnWEB_PORT=0" >> ${setupVars}
echo "pivpnHOST=" >> ${setupVars}
echo "pivpnKeepAlive=" >> ${setupVars}
echo "SHOW_REVOKED=1" >> ${setupVars}
sed -i "s|^pivpnDEV=.*|pivpnDEV=pivpn|" ${setupVars}
echo "HELP_SHOWN=1" >> ${setupVars}
echo '[[ -f /etc/openvpn/pivpn.env ]] && source /etc/openvpn/pivpn.env' >> ${setupVars}

# Move files around:
rm /etc/{pivpn/openvpn,pivpn}/setupVars.conf
ln -sf ${setupVars} /etc/pivpn/openvpn/setupVars.conf
ln -sf ${setupVars} /etc/pivpn/setupVars.conf
