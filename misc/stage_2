#!/bin/bash
export DEBIAN_FRONTEND=noninteractive
export LANG=C

##############################################################################################
# Execute second-stage of image building:
##############################################################################################
[[ -f /debootstrap/debootstrap ]] && /debootstrap/debootstrap --second-stage

##############################################################################################
# Install some packages that Frank-W had in his image:
##############################################################################################
apt install -y apt-transport-https bridge-utils dnsmasq iptables openssh-server openssh-client openssh-sftp-server ppp pppoeconf

##############################################################################################
# Install some support packages required for our image:
##############################################################################################
apt install -y --reinstall debian-keyring debian-archive-keyring sudo pv git resolvconf wget curl
systemctl enable nftables
git config --global pull.rebase false
FILE=/etc/resolvconf/resolv.conf.d/head
sed -i "/^nameserver /d" ${FILE}
echo "nameserver 127.0.0.1" >> ${FILE}

##############################################################################################
# Correctly configure SSH:
##############################################################################################
sed -i "s|#ClientAliveInterval .*|ClientAliveInterval 60|g" /etc/ssh/sshd_config
sed -i "s|#ClientAliveCountMax .*|ClientAliveCountMax 3|g" /etc/ssh/sshd_config
sed -i "s|#PermitRootLogin .*|PermitRootLogin yes|g" /etc/ssh/sshd_config

##############################################################################################
# Fix hung SSH session upon shutting down and/or restarting router:
##############################################################################################
ln -sf /usr/share/doc/openssh-client/examples/ssh-session-cleanup.service /etc/systemd/system/
systemctl enable --now ssh-session-cleanup

##############################################################################################
# Create our default users and assign default passwords to users:
##############################################################################################
# Assign default password to user "root":
echo -e "bananapi\nbananapi" | passwd -q root

# Create username "pi", being a member of the "sudo" and "users" group.
useradd -m -G sudo,users -s /bin/bash pi
echo -e "bananapi\nbananapi" | passwd -q pi
chown pi:pi -R /home/pi

# Create username "vpn", being a member of the "users" and "pi" group:
useradd -m -G users -s /usr/sbin/nologin vpn
usermod -aG vpn pi
chown vpn:vpn -R /home/vpn

# Create username "portal" and assign default password:
useradd -N -g nogroup -M -d /nonexistent -s /usr/sbin/nologin portal
echo -e "bananapi\nbananapi" | passwd -q portal

##############################################################################################
# Do some tasks necessary to make this image work correctly:
##############################################################################################
# Imitate "cls" command by linking to "clear" command:
ln -sf /usr/bin/clear /usr/local/bin/cls

# Set hostname:
echo "bpiwrt" > /etc/hostname

# Set IP address of both hostname and pi.hole
echo "192.168.2.1     bpiwrt" >> /etc/hosts

# Sets timezone to "America/Chicago":
rm /etc/localtime
ln -s /usr/share/zoneinfo/America/Chicago /etc/localtime

# Set a placeholder file for chrooting into read-only filesystem:
touch /etc/debian_chroot

# Sets locale to "en_US.UTF-8":
sed -i "s|# en_US.UTF-8 UTF-8|en_US.UTF-8 UTF-8|g" /etc/locale.gen
locale-gen

# Add routing table to "/etc/iproute2/rt_tables":
echo "200	vpn" >> /etc/iproute2/rt_tables

##############################################################################################
# Install files from the GitHub repository to build this image:
##############################################################################################
# Clone the repo:
git clone https://github.com/xptsp/bpiwrt-builder /opt/bpi-r2-router-builder/
# Link or copy the replacement files from the repo:
pushd /opt/bpi-r2-router-builder
./upgrade.sh --force-copy
git config pull.rebase false
popd
# Enable the onboard wifi service:
update-rc.d wifi start 99 5
# Link the "router-helper" command to "router-helper.sh" in helpers directory:
ln -sf /opt/bpi-r2-router-builder/helpers/router-helper.sh /usr/local/bin/router-helper

##############################################################################################
# Install xptsp's Debian APT repository on GitHub:
##############################################################################################
curl -SsL https://xptsp.github.io/ppa/KEY.gpg | gpg --dearmor > /usr/share/keyrings/xptsp.gpg
curl -SsL -o /etc/apt/sources.list.d/bpiwrt_repo.list https://xptsp.github.io/ppa/ppa.list

##############################################################################################
# Run upgrade process to update any packages:
##############################################################################################
apt update
apt upgrade -y

##############################################################################################
# Upgrade hostapd to v2.10 from bullseye-backports and disable service:
##############################################################################################
apt install -y hostapd/bullseye-backports
systemctl disable --now hostapd

##############################################################################################
# Install some necessary packages:
##############################################################################################
apt install -y toilet pmount eject lsb-release dialog mosquitto-clients gnupg squashfs-tools whois

##############################################################################################
# Place a list of english words in "/usr/share/dict/" for our password generator:
##############################################################################################
wget https://github.com/dobsondev/php-password-generator/raw/master/php-password-generator/adjectives.list -O /usr/share/dict/adjectives.list
wget https://github.com/dobsondev/php-password-generator/raw/master/php-password-generator/animals.list -O /usr/share/dict/animals.list

##############################################################################################
# Download the "mmc" binary and place in "/usr/local/bin":
##############################################################################################
wget https://github.com/frank-w/BPI-R2-4.14/raw/4.14-main/utils/mmc/mmc -O /usr/local/bin/mmc
chmod +x /usr/local/bin/mmc

##############################################################################################
# Get the file we'll need to flash during SD->EMMC copies:
##############################################################################################
RW=($(mount | grep " /boot " 2> /dev/null))
if [[ ! -z "${RW[5]}" ]]; then
	[[ "${RW[5]}" == *ro,* ]] && mount -o remount,rw /boot
	wget https://github.com/BPI-SINOVOIP/BPI-files/raw/master/SD/100MB/BPI-R2-EMMC-boot0-DDR1600-0k-0905.img.gz -O /boot/BPI-R2-EMMC-boot0-DDR1600-0k-0905.img.gz
	echo "WEBUI_SHARE=y" >> /boot/persistent.conf
fi

##################################################################################
# Create our custom login message:
##################################################################################
rm /etc/motd
rm /etc/update-motd.d/10-uname
ln -s /var/run/motd /etc/motd

##################################################################################
# Install some new utilities
##################################################################################
apt install -y pciutils usbutils wireless-tools net-tools unzip debconf-utils tree screen parted device-tree-compiler bluez
echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

##################################################################################
# Install avahi utilities
##################################################################################
apt install -y avahi-daemon
systemctl enable avahi-daemon

##################################################################################
# Install utility to track internet usage by adapter:
##################################################################################
apt install -y vnstat=1.18-2
systemctl disable vnstat
apt-mark hold vnstat

##################################################################################
# Install Samba
##################################################################################
echo "samba-common samba-common/dhcp boolean true" | debconf-set-selections
apt install -y samba
echo -e "bananapi\nbananapi" | smbpasswd -a pi
# Modify the Samba configuration to make sharing USB sticks more automatic
sed -i "s|^;   bind interfaces only = yes|    bind interfaces only = yes|" /etc/samba/smb.conf
sed -i "s|^;   interfaces = 127.0.0.0/8 eth0|   interfaces = br0|g" /etc/samba/smb.conf
systemctl enable smbd
systemctl enable nmbd

##################################################################################
# Install NGINX and PHP 7.4
##################################################################################
apt install -y nginx php7.4-fpm php7.4-cgi php7.4-xml php7.4-sqlite3 php7.4-intl apache2-utils php7.4-mysql php7.4-sqlite3 sqlite3 php7.4-zip php7.4-curl fcgiwrap
# Configure the "php-fpm" and "nginx" service: 
FILE=/etc/php/7.4/fpm/php.ini
sed -i "s|^display_errors = .*|display_errors = On|g" ${FILE}
sed -i "s|^session.gc_maxlifetime = .*|session.gc_maxlifetime = 86400|g" ${FILE}
ln -sf /etc/nginx/sites-available/router /etc/nginx/sites-enabled/router
usermod -aG systemd-journal www-data
# Start the services:
systemctl enable php7.4-fpm
systemctl enable nginx
systemctl enable fcgiwrap
# Mark these packages as held:
apt-mark hold nginx
apt-mark hold php7.4-fpm
apt-mark hold fcgiwrap

##################################################################################
# Install Transmission-daemon
##################################################################################
apt install -y transmission-daemon
# Configure the service:
mkdir -p /home/vpn/.config/transmission-daemon/
cp /opt/bpi-r2-router-builder/misc/config/transmission.json /home/vpn/.config/transmission-daemon/settings.json
test -e /etc/transmission-daemon/settings.json && rm /etc/transmission-daemon/settings.json
ln -sf /home/vpn/.config/transmission-daemon/settings.json /etc/transmission-daemon/settings.json
cp /opt/bpi-r2-router-builder/misc/config/transmission-daemon /etc/default/transmission-daemon
# Create the necessary directories and permission them correctly:
chown -R vpn:vpn /etc/transmission-daemon/
chown -R vpn:vpn /var/lib/transmission-daemon/
chmod -R 775 /etc/transmission-daemon/
chmod -R 775 /var/lib/transmission-daemon/
mkdir -p /home/vpn/{Incomplete,Completed}
chown -R vpn:vpn /home/vpn/*
chmod -R 775 /home/vpn/{Incomplete,Completed}
# Enable and start the service:
systemctl enable transmission-daemon

##################################################################################
# Replace transmission-daemon WebUI with custom WebUI:
##################################################################################
cd /usr/share/transmission/
mv web original
wget https://github.com/Secretmapper/combustion/archive/release.zip
unzip release.zip
rm release.zip
ln -sf combustion-release web
cd /

##################################################################################
# Install TrueCrypt and HD-Idle
##################################################################################
apt install -y truecrypt-cli hd-idle
cp /opt/bpi-r2-router-builder/misc/config/hd-idle /etc/default/hd-idle
systemctl enable hd-idle

##################################################################################
# Install the wireless regulatory table
##################################################################################
apt install -y wireless-regdb crda

################################################################################
# Install and configure miniupnp install
##################################################################################
# Install the miniupnp install quietly
echo "miniupnpd miniupnpd/start_daemon boolean true" | debconf-set-selections
echo "miniupnpd miniupnpd/ip6script boolean false" | debconf-set-selections
echo "miniupnpd miniupnpd/listen string br0" | debconf-set-selections
echo "miniupnpd miniupnpd/iface string wan" | debconf-set-selections
apt install -y miniupnpd miniupnpc
# Configure the service:
FILE=/etc/miniupnpd/miniupnpd.conf
sed -i "s|^#secure_mode=.*|secure_mode=yes|g" ${FILE}
sed -i "/secure_mode=no/d" ${FILE}
sed -i "s|^#enable_upnp=no|enable_upnp=yes|g" ${FILE}
sed -i "s|^#enable_natpmp=yes|enable_natpmp=yes|g" ${FILE}
sed -i -e '/^allow / s/^#*/#/' ${FILE}
sed -i -e '/^deny / s/^#*/#/' ${FILE}
sed -i "s|^force_igd_desc_v1=.*|#force_igd_desc_v1=no|" ${FILE}
sed -i -e "/upnp_/s/^#*//" ${FILE}
# Enable and restart the service:
systemctl enable miniupnpd

##################################################################################
# Install minissdpd package
##################################################################################
# Set some default settings for minissdpd package:
echo "minissdpd minissdpd/listen string br0" | debconf-set-selections
echo "minissdpd minissdpd/ip6 boolean false" | debconf-set-selections
echo "minissdpd minissdpd/start_daemon boolean true" | debconf-set-selections
# Install minissdpd package:
apt install -y minissdpd
sed -i "s|^MiniSSDPd_INTERFACE_ADDRESS=.*|MiniSSDPd_INTERFACE_ADDRESS=\"br0 mt7615_24g mt7615_5g\"|" /etc/default/minisspd
systemctl enable minissdpd

##################################################################################
# Install multicast-relay repo and supporting packages:
##################################################################################
# Install supporting packages here:
apt install -y python3-netifaces
# Clone the multicast-relay repo:
git clone https://github.com/alsmith/multicast-relay /opt/multicast-relay
# Configure and start the service:
cp /opt/bpi-r2-router-builder/misc/config/multicast-relay /etc/default/multicast-relay
systemctl enable multicast-relay

##################################################################################
# Install Privoxy and configure the service:
##################################################################################
# Install the software:
apt install -y privoxy
# Copy new Privoxy configuration files into place:
FILE=/etc/privoxy/config
test -f ${FILE}.bak || cp ${FILE} ${FILE}.bak
cp /opt/bpi-r2-router-builder/misc/config/privoxy-config.conf ${FILE} 
cp /opt/bpi-r2-router-builder/misc/config/privoxy-blocklist.conf $(dirname ${FILE})/blocklist.conf 
# Restart the services:
systemctl enable privoxy

##################################################################################
# Install Squid, SquidGuard, C-ICAP and SquidClamAV:
##################################################################################
# Install Squid:
apt install -y squid-openssl
# Copy new Squid configuration file into place:
FILE=/etc/squid/squid.conf
test -f ${FILE}.bak || cp ${FILE} ${FILE}.bak
cp /opt/bpi-r2-router-builder/misc/config/squid.conf ${FILE}

# Install SquidGuard with "--no-install-recommends" option because otherwise, the "squid-openssl" package
# will be uninstalled in favor of the "squid" package, which doesn't have build-in SSL support:
apt install -y --no-install-recommends squidguard
# Configure SquidGuard:
mkdir -p /var/lib/squidguard/db
chown -R proxy:proxy /var/lib/squidguard/db/
test -d /etc/squidguard/squidGuard.conf.default || cp /etc/squidguard/squidGuard.conf /etc/squidguard/squidGuard.conf.default 
cp /dev/null /etc/squidguard/squidGuard.conf
# Initialize SquidGuard database:
/usr/lib/squid/security_file_certgen -c -s /var/spool/squid/ssl_db -M 4MB

# Install the C-ICAP and SquidClamAV packages:
apt install -y libcurl4-gnutls-dev c-icap libicapapi-dev squidclamav clamav-daemon
# Configure C-ICAP service settings:
sed -i "s|^START=.*|START=yes|" /etc/default/c-icap
FILE=/etc/c-icap/c-icap.conf
test -f ${FILE}.bak || cp ${FILE} ${FILE}.bak
echo "Service squidclamav squidclamav.so" >> ${FILE}
sed -i "s|^ServerAdmin .*|ServerAdmin root@bpiwrt.local|" ${FILE} 
sed -i "s|^ServerName .*|ServerName bpiwrt|" ${FILE}
# Link the SquidClamAV configuration file:
ln -sf /etc/c-icap/squidclamav.conf /etc/squidclamav.conf

# Enable the services:
systemctl enable squid
systemctl enable c-icap
systemctl enable clamav-daemon

##################################################################################
# Install ddclient:
##################################################################################
apt install -y libio-socket-ssl-perl libio-socket-inet6-perl libjson-pp-perl libdata-validate-ip-perl ddclient
systemctl enable ddclient
cp /opt/bpi-r2-router-builder/misc/config/ddclient.conf /etc/ddclient.conf 

##################################################################################
# Install docker:
##################################################################################
# Install the software:
curl -L https://get.docker.com | bash
# Add user "pi" to group "docker":
usermod -aG docker pi
# Add "/var/lib/docker/bin" to PATH variable:
sed -i "s|PATH=\"|PATH=\"/var/lib/docker/bin:|g" /etc/profile

##################################################################################
# Install PiHole
##################################################################################
# Copy the default configuration to the "/etc/pihole" directory:
mkdir -p /etc/pihole
cp /opt/bpi-r2-router-builder/misc/config/pihole.conf /etc/pihole/setupVars.conf
cp /opt/bpi-r2-router-builder/misc/config/pihole-custom.list /etc/pihole/custom.list

# Install Pi-Hole on this machine:
curl -L https://install.pi-hole.net | bash /dev/stdin --unattended

# Remove "dnsmasq" package:
apt remove --autoremove dnsmasq
# Configure some things correctly
chown pihole:pihole /var/lib/misc
chown pihole:pihole -R /var/lib/misc/*
chown www-data:www-data -R /var/www/html
chown www-data:www-data -R /var/www/html/*
rm /var/www/html/index.nginx-debian.html
# Add pihole group to www-data
usermod -aG pihole www-data
# Set default administrative password to "bananapi"
pihole -a -p bananapi
# Fix the hostname resolution issue found:
echo "PIHOLE_PTR=HOSTNAME" >> /etc/pihole/pihole-FTL.conf
echo "LOCAL_IPV4=192.168.2.2" >> /etc/pihole/pihole-FTL.conf
# Modify init.d service script to call helper script before starting service:
sed -i "s|start$|/opt/bpi-r2-router-builder/helpers/pihole-script.sh\n\tstart|" /etc/init.d/pihole-FTL
# Set default DNS to cloudflare port 5051
sed -i "/PIHOLE_DNS_.*/d" /etc/pihole/setupVars.conf
echo "PIHOLE_DNS_1=127.0.0.1#5335" >> /etc/pihole/setupVars.conf
# Add site configuration for "pi.hole":
ln -sf /etc/nginx/sites-available/pihole /etc/nginx/sites-enabled/pihole
systemctl restart nginx
echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Set global DNS nameserver to PiHole:
echo "nameserver 127.0.0.1" > /etc/resolv.conf

##################################################################################
# Install unbound:
##################################################################################
# Instal and enable the software:
apt install -y unbound
systemctl enable unbound
# Disable and mask the "unbound-resolvconf" service: 
systemctl disable unbound-resolvconf
systemctl mask unbound-resolvconf
# Create the logging directory:
mkdir -p /var/log/unbound
touch /var/log/unbound/unbound.log
chown unbound /var/log/unbound/unbound.log

##################################################################################
# Install PiVPN using for WireGuard and OpenVPN:
##################################################################################
# Install wireguard-tools package without extra baggage, because required modules are baked in our OS:
apt install -y --no-install-recommends wireguard-tools qrencode openvpn

# Clone the PiVPN repository:
DIR=/usr/local/src/pivpn
git clone https://github.com/pivpn/pivpn.git ${DIR}

# Set repository head to commit "f80b0a7962d91862132c0a4abd65c1e67bd37bd7" (Dec 3rd, 2021):
cd ${DIR}
git reset --hard f80b0a7962d91862132c0a4abd65c1e67bd37bd7

# Copy the default WireGuard configuration to the "/etc/pihole" directory:
mkdir -p /etc/pivpn
cp /opt/bpi-r2-router-builder/misc/config/pivpn-wireguard.conf /etc/pivpn/setupVars.conf

# Run our modified PiVPN installer:
# FYI: See "/opt/bpi-r2-router-helper/misc/old/mod_pivpn.sh" on how it was modified....
bash /opt/bpi-r2-router-builder/misc/modded_pivpn_install.sh --unattended /etc/pivpn/setupVars.conf --reconfigure

# Copy the default OpenVPN configuration to the "/etc/pihole" directory:
cp /opt/bpi-r2-router-builder/misc/config/pivpn-openvpn.conf /etc/pivpn/setupVars.conf

# Run our modified PiVPN installer again:
bash /opt/bpi-r2-router-builder/misc/modded_pivpn_install.sh --unattended /etc/pivpn/setupVars.conf --reconfigure

# Customize the PiVPN setupVars.conf in the /tmp folder:
setupVars=/etc/pivpn/openvpn/setupVars.conf
sed -i "/^subnetClass=/d" ${setupVars}
sed -i "s|pivpnHOST=.*|pivpnHOST=|" ${setupVars}
sed -i "s|^pivpnDEV=.*|pivpnDEV=pivpn|" ${setupVars}
echo "SHOW_REVOKED=1" >> ${setupVars}
echo "HELP_SHOWN=1" >> ${setupVars}

#=============================================================================================
# <<NOTE TO SELF>> 2022-12-21: Bullseye image complete up to here!
#=============================================================================================
